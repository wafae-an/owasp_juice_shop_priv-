name: CodeQL SAST Analysis - OWASP Juice Shop

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  analyze:
    name: Analyse CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      packages: read
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Initialisation de CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Installation du projet
        run: npm install

      - name: Analyse CodeQL
        id: analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          upload: false
          output: ./codeql-results

      - name: Sauvegarde du rapport SARIF
        uses: actions/upload-artifact@v4
        with:
          name: codeql-sarif-results
          path: ./codeql-results/*.sarif
          retention-days: 30

  generate-html-report:
    name: G√©n√©ration du Rapport HTML
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: T√©l√©chargement des r√©sultats SARIF
        uses: actions/download-artifact@v4
        with:
          name: codeql-sarif-results
          path: ./sarif-results

      - name: Installation de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: G√©n√©ration du rapport HTML
        run: |
          mkdir -p reports
          
          echo "üìÅ Contenu du dossier sarif-results :"
          ls -la ./sarif-results/
          
          # Cr√©er le script de conversion dans un fichier s√©par√©
          cat > convert-sarif.js << 'ENDOFSCRIPT'
          const fs = require('fs');
          const path = require('path');

          function generateHtmlReport(sarifData, outputPath) {
            const run = sarifData.runs?.[0] || {};
            const results = run.results || [];
            const tool = run.tool?.driver?.name || 'CodeQL';
            const version = run.tool?.driver?.version || 'N/A';

            // Compter les r√©sultats par s√©v√©rit√©
            const severityCount = { error: 0, warning: 0, note: 0, none: 0 };
            results.forEach(result => {
              const severity = result.level?.toLowerCase() || 'warning';
              severityCount[severity] = (severityCount[severity] || 0) + 1;
            });

            const totalIssues = results.length;

            function getSeverityClass(severity) {
              switch(severity) {
                case 'error': return 'critical';
                case 'warning': return 'high';
                case 'note': return 'medium';
                case 'none': return 'low';
                default: return 'medium';
              }
            }

            function getSeverityText(severity) {
              switch(severity) {
                case 'error': return 'Critique';
                case 'warning': return '√âlev√©';
                case 'note': return 'Moyen';
                case 'none': return 'Faible';
                default: return 'Inconnu';
              }
            }

            let issuesHtml = '';
            if (totalIssues === 0) {
              issuesHtml = '<div class="no-issues"><h3>‚úÖ Aucune vuln√©rabilit√© d√©tect√©e</h3><p>Votre code semble s√©curis√© !</p></div>';
            } else {
              results.forEach((result, index) => {
                const severity = result.level?.toLowerCase() || 'warning';
                const severityText = getSeverityText(severity);
                const severityClass = getSeverityClass(severity);
                
                let locationHtml = '';
                if (result.locations && result.locations.length > 0) {
                  const locations = result.locations.map(loc => 
                    \`\${loc.physicalLocation?.artifactLocation?.uri || 'Fichier inconnu'}:\${loc.physicalLocation?.region?.startLine || '?'}\`
                  ).join(', ');
                  locationHtml = \`<div class="location"><strong>üìç Emplacement:</strong> \${locations}</div>\`;
                }
                
                issuesHtml += \`
                <div class="issue \${severityClass}">
                  <div class="issue-header">
                    <span class="rule-id">#\${index + 1} - \${result.ruleId || 'N/A'}</span>
                    <span class="severity \${severityClass}">\${severityText}</span>
                  </div>
                  <div class="message">
                    <strong>Description:</strong> \${result.message?.text || 'Aucune description disponible'}
                  </div>
                  \${locationHtml}
                </div>
                \`;
              });
            }

            const htmlContent = \`
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport de S√©curit√© - \${tool}</title>
    <style>
        * { box-sizing: border-box; margin: 0; padding: 0; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            line-height: 1.6; 
            color: #24292e; 
            background: #f6f8fa;
            padding: 20px;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            background: white;
            border-radius: 6px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header { 
            background: linear-gradient(135deg, #2b5797, #1e3c72);
            color: white; 
            padding: 30px; 
            text-align: center;
        }
        .header h1 { 
            font-size: 2.5em; 
            margin-bottom: 10px;
            font-weight: 300;
        }
        .summary { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
            gap: 15px; 
            padding: 25px; 
            background: #f8f9fa;
            border-bottom: 1px solid #e1e4e8;
        }
        .stat-card { 
            background: white; 
            padding: 20px; 
            border-radius: 6px; 
            text-align: center;
            border-left: 4px solid;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }
        .stat-card.critical { border-left-color: #d73a49; }
        .stat-card.high { border-left-color: #f66a0a; }
        .stat-card.medium { border-left-color: #ffd33d; }
        .stat-card.low { border-left-color: #28a745; }
        .stat-number { 
            font-size: 2em; 
            font-weight: bold; 
            display: block; 
        }
        .issues-section { padding: 25px; }
        .issue { 
            border: 1px solid #e1e4e8; 
            margin: 15px 0; 
            padding: 20px; 
            border-radius: 6px;
            border-left: 4px solid;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .issue:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
        .issue.critical { border-left-color: #d73a49; background: #fff5f5; }
        .issue.high { border-left-color: #f66a0a; background: #fff8f0; }
        .issue.medium { border-left-color: #ffd33d; background: #fffdef; }
        .issue.low { border-left-color: #28a745; background: #f0fff4; }
        .issue-header { 
            display: flex; 
            justify-content: space-between; 
            align-items: center;
            margin-bottom: 10px;
        }
        .rule-id { 
            font-weight: bold; 
            color: #0366d6; 
            font-size: 1.1em;
        }
        .severity { 
            padding: 4px 12px; 
            border-radius: 20px; 
            font-size: 0.8em; 
            font-weight: bold;
            text-transform: uppercase;
        }
        .severity.critical { background: #d73a49; color: white; }
        .severity.high { background: #f66a0a; color: white; }
        .severity.medium { background: #ffd33d; color: #333; }
        .severity.low { background: #28a745; color: white; }
        .message { 
            margin: 15px 0; 
            font-size: 1em;
            line-height: 1.5;
        }
        .location { 
            color: #6a737d; 
            font-size: 0.9em;
            background: #f6f8fa;
            padding: 8px 12px;
            border-radius: 4px;
            margin-top: 10px;
        }
        .no-issues { 
            text-align: center; 
            padding: 40px; 
            color: #6a737d;
        }
        .footer { 
            text-align: center; 
            padding: 20px; 
            color: #6a737d; 
            border-top: 1px solid #e1e4e8;
            background: #f8f9fa;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîí Rapport d'Analyse de S√©curit√©</h1>
            <p>\${tool} v\${version} - G√©n√©r√© le \${new Date().toLocaleString('fr-FR')}</p>
        </div>

        <div class="summary">
            <div class="stat-card \${totalIssues === 0 ? 'low' : 'critical'}">
                <span class="stat-number">\${totalIssues}</span>
                Total des probl√®mes
            </div>
            <div class="stat-card critical">
                <span class="stat-number">\${severityCount.error}</span>
                Critiques
            </div>
            <div class="stat-card high">
                <span class="stat-number">\${severityCount.warning}</span>
                √âlev√©s
            </div>
            <div class="stat-card medium">
                <span class="stat-number">\${severityCount.note}</span>
                Moyens
            </div>
            <div class="stat-card low">
                <span class="stat-number">\${severityCount.none}</span>
                Faibles
            </div>
        </div>

        <div class="issues-section">
            <h2 style="margin-bottom: 20px; color: #2b5797;">üìã D√©tail des Vuln√©rabilit√©s</h2>
            \${issuesHtml}
        </div>

        <div class="footer">
            <p>Rapport g√©n√©r√© automatiquement par GitHub Actions</p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const issues = document.querySelectorAll('.issue');
            issues.forEach(issue => {
                issue.addEventListener('click', function() {
                    this.classList.toggle('expanded');
                });
            });
        });
    </script>
</body>
</html>
            \`;

            fs.writeFileSync(outputPath, htmlContent);
          }

          // Traitement de tous les fichiers SARIF
          const sarifDir = './sarif-results';
          const reportsDir = './reports';

          if (!fs.existsSync(sarifDir)) {
            console.error('‚ùå Dossier sarif-results introuvable');
            process.exit(1);
          }

          const files = fs.readdirSync(sarifDir).filter(file => file.endsWith('.sarif'));
          
          if (files.length === 0) {
            console.log('‚ÑπÔ∏è  Aucun fichier SARIF trouv√©');
            process.exit(0);
          }

          files.forEach(file => {
            try {
              const sarifPath = path.join(sarifDir, file);
              const sarifData = JSON.parse(fs.readFileSync(sarifPath, 'utf8'));
              const outputFile = path.join(reportsDir, file.replace('.sarif', '.html'));
              
              generateHtmlReport(sarifData, outputFile);
              console.log(\`‚úÖ Converti: \${file} -> \${path.basename(outputFile)}\`);
            } catch (error) {
              console.error(\`‚ùå Erreur avec \${file}: \${error.message}\`);
            }
          });

          console.log(\`üéØ Conversion termin√©e: \${files.length} fichier(s) trait√©(s)\`);
          ENDOFSCRIPT

          # Ex√©cuter le script de conversion
          node convert-sarif.js
          
          echo "üìÅ Contenu du dossier reports :"
          ls -lh ./reports/
          echo "‚úÖ Rapport(s) HTML g√©n√©r√©(s) avec succ√®s"

      - name: Upload du rapport HTML
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report
          path: reports/*.html
          retention-days: 90

      - name: R√©sum√© du workflow
        run: |
          echo "## üìä Rapport d'Analyse SAST - CodeQL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Analyse termin√©e avec succ√®s !" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          report_count=$(ls -1 ./reports/*.html 2>/dev/null | wc -l || echo "0")
          echo "üìÑ **$report_count rapport(s) HTML g√©n√©r√©(s)**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìã Fichiers disponibles :" >> $GITHUB_STEP_SUMMARY
          for file in ./reports/*.html; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "- üîç [$filename](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó [T√©l√©charger les rapports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
