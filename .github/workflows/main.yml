name: CodeQL SAST Analysis - OWASP Juice Shop

on:
  push:
    branches: [ "main", "master", "develop" ]
  pull_request:
    branches: [ "main", "master" ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  analyze:
    name: Analyse CodeQL
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      packages: read
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Initialisation de CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Installation du projet
        run: npm install

      - name: Analyse CodeQL
        id: analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
          upload: false  # ⛔ évite l'envoi automatique vers Code Scanning
          output: ./codeql-results

      - name: Sauvegarde du rapport SARIF
        uses: actions/upload-artifact@v4
        with:
          name: codeql-sarif-results
          path: ./codeql-results/*.sarif
          retention-days: 30

  generate-html-report:
    name: Génération du Rapport HTML
    needs: analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v4

      - name: Téléchargement des résultats SARIF
        uses: actions/download-artifact@v4
        with:
          name: codeql-sarif-results
          path: ./sarif-results

      - name: Installation de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Génération du rapport HTML
        run: |
          mkdir -p reports
          npm install -g sarif-html
          
          # Convertir chaque fichier SARIF en HTML
          for file in ./sarif-results/*.sarif; do
            if [ -f "$file" ]; then
              filename=$(basename "$file" .sarif)
              echo "🔄 Conversion de $filename..."
              npx sarif-html "$file" --output "./reports/${filename}.html"
            fi
          done
          
          # Vérifier que les fichiers ont été créés
          ls -lh ./reports/
          echo "✅ Rapport(s) HTML généré(s) avec succès"

      - name: Upload du rapport HTML
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report
          path: reports/*.html
          retention-days: 90

      - name: Résumé du workflow
        run: |
          echo "## 📊 Rapport d'Analyse SAST - CodeQL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Analyse terminée avec succès !" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Compter les fichiers générés
          report_count=$(ls -1 ./reports/*.html 2>/dev/null | wc -l)
          echo "📄 **$report_count rapport(s) HTML généré(s)**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Lister les rapports
          echo "### 📋 Fichiers disponibles :" >> $GITHUB_STEP_SUMMARY
          for file in ./reports/*.html; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "- 🔍 $filename" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [Télécharger les rapports](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)" >> $GITHUB_STEP_SUMMARY
